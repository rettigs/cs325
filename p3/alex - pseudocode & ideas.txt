Project 3
initialize best path

test
	T[i,j] = A[i,j]
	If i > 0
		If T[i-1,j] < 1 then A[i,j]
	If j > 0
		If T[i,j-1] < 1 then A[i,j]
	Return T[i,j]
    

Recursive solution: O(factorial of some sort)
Dynamic solution:   O(cij) = O(n)

For dynamic solution:
Idea is start in upper left corner i = 0, j = 0
Run through test to get best path

load A[x,y] with values on board
initialize ybest, xbest, T[x,y] with 0
initialize P[x,y] with (-1,-1)
for i = 0 ... y
	for j = 0 ... x
		T[i,j] <- A[i,j]
		if i > 0
			if T[i-1,j] + A[i,j] > T[i,j]
				T[i,j] <- T[i-1,j] + A[i,j]
				P[i,j] <- pointer to A[i-1,j]
		if j > 0
			if T[i,j-1] + A[i,j] > T[i,j]
				T[i,j] <- T[i,j-1] + A[i,j]
				P[i,j] <- (i,j)
		if T[i,j] > T[ybest,xbest]
			ybest <- i
			xbest <- j
point.y <- ybest
point.x <- xbest
while point.y != -1 AND point.x != -1
	concat point with path
	point <- P[point.y,point.x]

Recursive Pseudocode
Path (int board[y][x])
	if x > 1
		maxx <- board[y][x].value + Path(board[y][x-1]).value
		pathx <- board[y][x] concat board[y][x-1].path
	else
		maxx <- board[y][x].value
		pathx <- board[y][x]
	if y < 1
		maxy <- board[y][x].value + Path(board[y][x-1]).value
		pathy <- board[y][x] concat board[y][x-1]
	else
		maxy <- board[y][x].value
		pathy <- board[y][x]
	if maxx > maxy
		board[y][x].max <- maxx
		board[y][x].path <- pathx
	else
		board[y][x].max <- maxy
		board[y][x].path <- pathy
	return board[y][x]