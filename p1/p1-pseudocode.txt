getVisibleAlgorithm1(slopes[], intercepts[])
	visibility[] = True for length(slopes)
	loop from j = 0 to j < the length(slopes)
		loop from i = j + 1 to i < the length(slopes)
			loop from k = i + 1 to k < the length(slopes)
				jkIntersectionY = slopes[j] * (intercepts[j] - intercepts[k]) + intercepts[j] * (slopes[k] - slopes[j])
				i_Y = slopes[i] * (intercepts[j] - intercepts[k]) + intercepts[i] * (slopes[k] - slopes[j])
				if jkIntersectionY > i_Y
					visibility[i] = False
	return visibility

getVisibleAlgorithm2(slopes[], intercepts[])
	visibility[] = True for length(slopes)
	loop from j = 0 to j < the length(slopes)
		loop from i = j + 1 to i < the length(slopes)
			loop from k = i + 1 to k < the length(slopes)
				# break if line has already been marked as not visible
				if visibility[i] != False
					# compute intersection
					jkIntersectionY = slopes[j] * (intercepts[j] - intercepts[k]) + intercepts[j] * (slopes[k] - slopes[j])
					i_Y = slopes[i] * (intercepts[j] - intercepts[k]) + intercepts[i] * (slopes[k] - slopes[j])
					if jkIntersectionY > i_Y
						visibility[i] = False
	return visibility

getVisibileAlgorithm3(slopes&intercepts[])
	if (length(tail(slopes&intercepts)) < 2)
		return slopes&intercepts
	else 
		visible[] concatenate head(slopes&intercepts)
		loop from j = 0 to j < the length(slopes)
			loop from i = j + 1 to i < the length(slopes)
	loop from i = 1 to i < length(slopes)


	
	
if tail(index) == []
	return index
else concat the head of index with recurse(tail(index)))



a3GetVisible(slopes, intercepts)
	declare visibleSlopes, visibleIntercepts, visibleIndices
	declare visibility to be false for length(slopes)
	loop from i = 0 to i < length(slopes)
		a3ActualWork passing in slopes[i], intercepts[i], visibleSlopes, visibleIntercepts, visibleIndices, visibility, i
	return visibility


a3ActualWork(slopes, intercepts, visibleSlopes, visibleIntercepts, visibleIndices, visibility, i)
	if length(visibleSlopes) < 2
		append slope to visibileSlopes
		append intercept to visibileIntercepts
		append i to visibleIndices
		visibility[i] = true
	else
		k = length(visibleSlopes) - 1
		j = k - 1
		jkIntersectionY = visibleSlopes[j] * (visibleIntercepts[j] - visibleIntercepts[k]) + visibleIntercepts[j] * (visibleSlopes[k] - visibleSlopes[j])
		i_Y = slope * (visibleIntercepts[j] - visibleIntercepts[k]) + intercept * (visibleSlopes[k] - visibleSlopes[j])
		if jkIntersectionY >= i_Y
			append slope to visibileSlopes
			append intercept to visibileIntercepts
			append i to visibleIndices
			set visibility[i] = true
		else
			remove the last item of visibleSlopes
			remove the last item of visibleIntercepts
			visibility[visibleIndices[k]] = False
			remove the last item of visibleIndices
			a3actualWork(slope, intercept, visibleSlopes, visibleIntercepts, visibleIndices, visibility, i)

	
a3GetVisible
	loop from i = 0 to i < length(array)
		possiblyAddToVisibleSet&RemoveCovered(array[i],visible)


possiblyAddToVisibleSet&RemoveCovered(line,visible[])
	k = length(visible.slopes) - 1
	j = k - 1
	jkIntersectionY = visible.slopes[j] * (visible.intercepts[j] - visible.intercepts[k]) + visible.intercepts[j] * (visible.slopes[k] - visible.slopes[j])
	
	i_Y = line.slopes * (visible.intercepts[j] - visible.intercepts[k]) + line.intercepts * (visible.slopes[k] - visible.slopes[j])
	if jkIntersectionY > i_Y
		return concat(visible,line)
	else
		return possiblyAddToVisibleSet&RemoveCovered(line,visible[] - last element of visible)
