algorithm4(lines):
    if len(lines) <= 1:
        return lines
    else:
        left = algorithm4(first half of lines)
        right = algorithm4(second half of lines)
    merged = mergeVisible(left, right)
    return merged

def mergeVisible(a, b):
    # Note: A indices go from left to right, while B indices go from right to left.
    # Note: We skip the first line of each element because the lines with least and most slope are always visible.
    A_prev = A[0]
    A_new = A[1]
    B_prev = B[0]
    B_new = B[1]
    while checking A's or checking B's:
        if checking A's:
            # Check the next line in A.
            x*, y* = intersection(A_prev, B_prev)
            testLineY = A_new.slope * x* + A_new.intercept
            if y* > testLineY:
                stop checking A's (because the rest of them are invisible)
            else:
                A_prev++, A_new++ # Prepare for the next iteration.

                # Now we check to make sure that we didn't just cover the last line in 'B'.
                if there is a previously added line in j:
                    x*, y* = intersection(A_prev, B_prev)
                    testLineY = B_new.slope * x* + B_new.intercept
                    if y* > testLineY:
                        stop checking B's (because the rest of them are invisible)
                        B_prev--, B_new-- # Backtrack because we overstepped.

        if checking B's:
            # Check the next line in B.
            x*, y* = intersection(B_prev, A_prev)
            testLineY = B_new.slope * x* + B_new.intercept
            if y* > testLineY:
                stop checking B's (because the rest of them are invisible)
            else:
                B_prev++, B_new++ # Prepare for the next iteration.

                # Now we check to make sure that we didn't just cover the last line in 'A'.
                if there is a previously added line in j:
                    x*, y* = intersection(B_prev, A_prev)
                    testLineY = A_new.slope * x* + A_new.intercept
                    if y* > testLineY:
                        stop checking A's (because the rest of them are invisible)
                        A_prev--, A_new-- # Backtrack because we overstepped.

    vlines = a[:A_new] + b[B_new:]
    return vlines
